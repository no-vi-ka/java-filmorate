CREATE TABLE IF NOT EXISTS genres (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS mpa_rating (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR,
  email VARCHAR NOT NULL UNIQUE,
  login VARCHAR NOT NULL,
  birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS friendship (
  user_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  friend_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS films (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR NOT NULL,
  description VARCHAR(200),
  release_date DATE NOT NULL CHECK (release_date > '1895-12-28'),
  mpa_id INTEGER REFERENCES mpa_rating (id),
  duration INTEGER CHECK (duration > 0)
);

CREATE TABLE IF NOT EXISTS film_genres (
  film_id BIGINT REFERENCES films (id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres (id),
  PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes_film (
  film_id BIGINT REFERENCES films (id) ON DELETE CASCADE,
  user_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
  PRIMARY KEY (film_id, user_id)
);


--DROP TABLE IF EXISTS genres CASCADE;
--DROP TABLE IF EXISTS mpa_rating CASCADE;
--DROP TABLE IF EXISTS users CASCADE;
--DROP TABLE IF EXISTS friendship CASCADE;
--DROP TABLE IF EXISTS films CASCADE;
--DROP TABLE IF EXISTS film_genres CASCADE;
--DROP TABLE IF EXISTS likes_film CASCADE;
--
--
--
--CREATE TABLE IF NOT EXISTS genres (
--  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--  name varchar NOT NULL
--);
--
--CREATE TABLE IF NOT EXISTS mpa_rating (
--  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--  name VARCHAR NOT NULL UNIQUE
--);
--
--CREATE TABLE IF NOT EXISTS users (
--  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--  name VARCHAR,
--  email VARCHAR NOT NULL UNIQUE,
--  login VARCHAR NOT NULL,
--  birthday DATE NOT NULL
--);
--
--
--
--
--CREATE TABLE IF NOT EXISTS friendship (
--USER_ID BIGINT REFERENCES USERS (ID) NOT NULL,
--friend_id BIGINT REFERENCES USERS (ID) NOT NULL,
--unique (USER_ID, friend_id)
--);
--
--
--
----CREATE TABLE IF NOT EXISTS friendship (
----    user_id BIGINT NOT NULL,
----    friend_id BIGINT NOT NULL
----);
----
----ALTER TABLE friendship ADD CONSTRAINT IF NOT EXISTS fk_Friends_user_id FOREIGN KEY(user_id) REFERENCES users (id);
----
----ALTER TABLE friendship ADD CONSTRAINT IF NOT EXISTS fk_Friends_friends_id FOREIGN KEY(friend_id) REFERENCES users (id);
--
----CREATE TABLE IF NOT EXISTS friendship (
----  user_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
----  friend_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
----  PRIMARY KEY (user_id, friend_id)
----);
--
--CREATE TABLE IF NOT EXISTS films (
--  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--  name VARCHAR NOT NULL,
--  description VARCHAR(200),
--  release_date DATE NOT NULL CHECK (release_date > '1895-12-28'),
--  mpa_id INTEGER REFERENCES mpa_rating (id),
--  duration INTEGER CHECK (duration > 0)
--);
--
--CREATE TABLE IF NOT EXISTS film_genres (
--  film_id BIGINT REFERENCES films (id) ON DELETE CASCADE,
--  genre_id INTEGER REFERENCES genres (id),
--  PRIMARY KEY (film_id, genre_id)
--);
--
------CREATE TABLE IF NOT EXISTS likes_film (
------  film_id BIGINT REFERENCES films (id) ON DELETE CASCADE,
------  user_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
------  PRIMARY KEY (film_id, user_id)
------);
----
----CREATE TABLE IF NOT EXISTS likes_film (
----film_id BIGINT REFERENCES films (id) NOT NULL,
----user_id BIGINT REFERENCES users (id) NOT NULL,
----unique (film_id, user_id)
----);
--CREATE TABLE IF NOT EXISTS likes_film (
--film_id BIGINT REFERENCES films (ID) NOT NULL,
--USER_ID BIGINT REFERENCES USERS (ID) NOT NULL,
--unique (film_id, USER_ID)
--);
--
--
--
--
--
--
--
--
--
--
--
--
----DROP TABLE IF EXISTS FILMS CASCADE;
----DROP TABLE IF EXISTS GENRES CASCADE;
----DROP TABLE IF EXISTS GENRES_FILMS CASCADE;
----DROP TABLE IF EXISTS USERS CASCADE;
----DROP TABLE IF EXISTS FRIENDS CASCADE;
----DROP TABLE IF EXISTS FILMS_LIKES CASCADE;
----
----
----CREATE TABLE IF NOT EXISTS RATINGS (
----RATING_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
----NAME_RATING VARCHAR NOT NULL
----);
----
----
----CREATE TABLE IF NOT EXISTS FILMS (
----FILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
----NAME VARCHAR NOT NULL,
----DESCRIPTION VARCHAR(200) NOT NULL,
----RELEASEDATA DATE,
----DURATION INTEGER,
----RATING_ID INTEGER REFERENCES RATINGS (RATING_ID)
----);
----
----CREATE TABLE IF NOT EXISTS GENRES (
----GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
----NAME_GENRE VARCHAR NOT NULL
----);
----
----CREATE TABLE IF NOT EXISTS GENRES_FILMS (
----FILM_ID INTEGER REFERENCES FILMS (FILM_ID) NOT NULL,
----GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID) NOT NULL,
----unique (FILM_ID, GENRE_ID)
----);
----
----CREATE TABLE IF NOT EXISTS USERS (
----USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
----NAME VARCHAR NOT NULL,
----EMAIL VARCHAR NOT NULL,
----LOGIN VARCHAR NOT NULL,
----BIRTHDAY DATE NOT NULL
----);
----
----CREATE TABLE IF NOT EXISTS FRIENDS (
----USER_ID INTEGER REFERENCES USERS (USER_ID) NOT NULL,
----USER_ANOTHER_ID INTEGER REFERENCES USERS (USER_ID) NOT NULL,
----unique (USER_ID, USER_ANOTHER_ID)
----);
----
----CREATE TABLE IF NOT EXISTS FILMS_LIKES (
----FILM_ID INTEGER REFERENCES FILMS (FILM_ID) NOT NULL,
----USER_ID INTEGER REFERENCES USERS (USER_ID) NOT NULL,
----unique (FILM_ID, USER_ID)
----);